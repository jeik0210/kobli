.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenILS::QueryParser 3pm"
.TH OpenILS::QueryParser 3pm "2013-12-04" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenILS::QueryParser \- basic QueryParser class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OpenILS::QueryParser;
my \f(CW$QParser\fR = OpenILS::QueryParser\->new(%args);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Main entrypoint into the QueryParser functionality.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "facet_class_count"
.IX Subsection "facet_class_count"
.Vb 1
\&    $count = $QParser\->facet_class_count();
.Ve
.SS "search_class_count"
.IX Subsection "search_class_count"
.Vb 1
\&    $count = $QParser\->search_class_count();
.Ve
.SS "filter_count"
.IX Subsection "filter_count"
.Vb 1
\&    $count = $QParser\->filter_count();
.Ve
.SS "modifier_count"
.IX Subsection "modifier_count"
.Vb 1
\&    $count = $QParser\->modifier_count();
.Ve
.SS "custom_data"
.IX Subsection "custom_data"
.Vb 1
\&    $data = $QParser\->custom_data($class);
.Ve
.SS "operators"
.IX Subsection "operators"
.Vb 1
\&    $operators = $QParser\->operators();
.Ve
.PP
Returns hashref of the configured operators.
.SS "filters"
.IX Subsection "filters"
.Vb 1
\&    $filters = $QParser\->filters();
.Ve
.PP
Returns arrayref of the configured filters.
.SS "filter_callbacks"
.IX Subsection "filter_callbacks"
.Vb 1
\&    $filter_callbacks = $QParser\->filter_callbacks();
.Ve
.PP
Returns hashref of the configured filter callbacks.
.SS "modifiers"
.IX Subsection "modifiers"
.Vb 1
\&    $modifiers = $QParser\->modifiers();
.Ve
.PP
Returns arrayref of the configured modifiers.
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $QParser = OpenILS::QueryParser\->new(%args);
.Ve
.PP
Creates a new QueryParser object.
.SS "new_plan"
.IX Subsection "new_plan"
.Vb 1
\&    $query_plan = $QParser\->new_plan();
.Ve
.PP
Create a new query plan.
.SS "add_search_filter"
.IX Subsection "add_search_filter"
.Vb 1
\&    $QParser\->add_search_filter($filter, [$callback]);
.Ve
.PP
Adds a filter with the specified name and an optional callback to the
QueryParser configuration.
.SS "add_search_modifier"
.IX Subsection "add_search_modifier"
.Vb 1
\&    $QParser\->add_search_modifier($modifier);
.Ve
.PP
Adds a modifier with the specified name to the QueryParser configuration.
.SS "add_facet_class"
.IX Subsection "add_facet_class"
.Vb 1
\&    $QParser\->add_facet_class($facet_class);
.Ve
.PP
Adds a facet class with the specified name to the QueryParser configuration.
.SS "add_search_class"
.IX Subsection "add_search_class"
.Vb 1
\&    $QParser\->add_search_class($class);
.Ve
.PP
Adds a search class with the specified name to the QueryParser configuration.
.SS "add_search_modifier"
.IX Subsection "add_search_modifier"
.Vb 1
\&    $op = $QParser\->operator($operator, [$newvalue]);
.Ve
.PP
Retrieves or sets value for the specified operator. Valid operators and
their defaults are as follows:
.IP "\(bu" 4
and => &&
.IP "\(bu" 4
or => ||
.IP "\(bu" 4
group_start => (
.IP "\(bu" 4
group_end => )
.IP "\(bu" 4
required => +
.IP "\(bu" 4
disallowed => \-
.IP "\(bu" 4
modifier => #
.SS "facet_classes"
.IX Subsection "facet_classes"
.Vb 1
\&    $classes = $QParser\->facet_classes([\e@newclasses]);
.Ve
.PP
Returns arrayref of all configured facet classes after optionally
replacing configuration.
.SS "search_classes"
.IX Subsection "search_classes"
.Vb 1
\&    $classes = $QParser\->search_classes([\e@newclasses]);
.Ve
.PP
Returns arrayref of all configured search classes after optionally
replacing the previous configuration.
.SS "add_query_normalizer"
.IX Subsection "add_query_normalizer"
.Vb 1
\&    $function = $QParser\->add_query_normalizer($class, $field, $func, [\e@params]);
.Ve
.SS "query_normalizers"
.IX Subsection "query_normalizers"
.Vb 1
\&    $normalizers = $QParser\->query_normalizers($class, $field);
.Ve
.PP
Returns a list of normalizers associated with the specified search class
and field
.SS "add_filter_normalizer"
.IX Subsection "add_filter_normalizer"
.Vb 1
\&    $normalizer = $QParser\->add_filter_normalizer($filter, $func, [\e@params]);
.Ve
.PP
Adds a normalizer function to the specified filter.
.SS "filter_normalizers"
.IX Subsection "filter_normalizers"
.Vb 1
\&    $normalizers = $QParser\->filter_normalizers($filter);
.Ve
.PP
Return arrayref of normalizer functions associated with the specified filter.
.SS "default_search_class"
.IX Subsection "default_search_class"
.Vb 1
\&    $default_class = $QParser\->default_search_class([$class]);
.Ve
.PP
Set or return the default search class.
.SS "remove_facet_class"
.IX Subsection "remove_facet_class"
.Vb 1
\&    $QParser\->remove_facet_class($class);
.Ve
.PP
Remove the specified facet class from the configuration.
.SS "remove_search_class"
.IX Subsection "remove_search_class"
.Vb 1
\&    $QParser\->remove_search_class($class);
.Ve
.PP
Remove the specified search class from the configuration.
.SS "add_facet_field"
.IX Subsection "add_facet_field"
.Vb 1
\&    $QParser\->add_facet_field($class, $field);
.Ve
.PP
Adds the specified field (and facet class if it doesn't already exist)
to the configuration.
.SS "facet_fields"
.IX Subsection "facet_fields"
.Vb 1
\&    $fields = $QParser\->facet_fields($class);
.Ve
.PP
Returns arrayref with list of fields for specified facet class.
.SS "add_search_field"
.IX Subsection "add_search_field"
.Vb 1
\&    $QParser\->add_search_field($class, $field);
.Ve
.PP
Adds the specified field (and facet class if it doesn't already exist)
to the configuration.
.SS "search_fields"
.IX Subsection "search_fields"
.Vb 1
\&    $fields = $QParser\->search_fields();
.Ve
.PP
Returns arrayref with list of configured search fields.
.SS "add_search_class_alias"
.IX Subsection "add_search_class_alias"
.Vb 1
\&    $QParser\->add_search_class_alias($class, $alias);
.Ve
.SS "search_class_aliases"
.IX Subsection "search_class_aliases"
.Vb 1
\&    $aliases = $QParser\->search_class_aliases($class);
.Ve
.SS "add_search_field_alias"
.IX Subsection "add_search_field_alias"
.Vb 1
\&    $QParser\->add_search_field_alias($class, $field, $alias);
.Ve
.SS "search_field_aliases"
.IX Subsection "search_field_aliases"
.Vb 1
\&    $aliases = $QParser\->search_field_aliases();
.Ve
.SS "remove_facet_field"
.IX Subsection "remove_facet_field"
.Vb 1
\&    $QParser\->remove_facet_field($class, $field);
.Ve
.SS "remove_search_field"
.IX Subsection "remove_search_field"
.Vb 1
\&    $QParser\->remove_search_field($class, $field);
.Ve
.SS "remove_search_field_alias"
.IX Subsection "remove_search_field_alias"
.Vb 1
\&    $QParser\->remove_search_field_alias($class, $field, $alias);
.Ve
.SS "remove_search_class_alias"
.IX Subsection "remove_search_class_alias"
.Vb 1
\&    $QParser\->remove_search_class_alias($class, $alias);
.Ve
.SS "debug"
.IX Subsection "debug"
.Vb 1
\&    $debug = $QParser\->debug([$debug]);
.Ve
.PP
Return or set whether debugging output is enabled.
.SS "query"
.IX Subsection "query"
.Vb 1
\&    $query = $QParser\->query([$query]);
.Ve
.PP
Return or set the query.
.SS "parse_tree"
.IX Subsection "parse_tree"
.Vb 1
\&    $parse_tree = $QParser\->parse_tree([$parse_tree]);
.Ve
.PP
Return or set the parse tree associated with the QueryParser.
.SS "parse"
.IX Subsection "parse"
.Vb 1
\&    $QParser\->parse([$query]);
.Ve
.PP
Parse the specified query, or the query already associated with the QueryParser
object.
.SS "decompose"
.IX Subsection "decompose"
.Vb 1
\&    ($struct, $remainder) = $QParser\->decompose($querystring, [$current_class], [$recursing], [$phrase_helper]);
.Ve
.PP
This routine does the heavy work of parsing the query string recursively.
Returns the top level query plan, or the query plan from a lower level plus
the portion of the query string that needs to be processed at a higher level.
.SS "find_class_index"
.IX Subsection "find_class_index"
.Vb 1
\&    $index = $QParser\->find_class_index($class, $query);
.Ve
.SS "core_limit"
.IX Subsection "core_limit"
.Vb 1
\&    $limit = $QParser\->core_limit([$limit]);
.Ve
.PP
Return and/or set the core_limit.
.SS "superpage"
.IX Subsection "superpage"
.Vb 1
\&    $superpage = $QParser\->superpage([$superpage]);
.Ve
.PP
Return and/or set the superpage.
.SS "superpage_size"
.IX Subsection "superpage_size"
.Vb 1
\&    $size = $QParser\->superpage_size([$size]);
.Ve
.PP
Return and/or set the superpage size.
